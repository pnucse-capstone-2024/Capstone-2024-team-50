import React, { useState } from 'react';
import { Typography, Box, Stepper, Step, StepLabel, Button, Radio, RadioGroup, FormControlLabel, TextField, CircularProgress, Snackbar, Paper } from '@mui/material';
import AgentSelect from './module/AgentSelect';

import { useContext } from 'react';

import { UserContext } from '../../core/user';

import { fetchPentestToolsByCategory, fetchTest, fetchGetServicesByIP, fetchBasicScanByIP, fetchServiceScanByIP, fetchAttackWithIPAndToolID} from '../../services/KaliAttackServices';

const steps = [
  { label: 'Reconnaissance', category: 'recon' },
  { label: 'Vulnerability Scanning', category: 'vulnscan' },
  { label: 'Vulnerability Lookup', category: 'vulnlookup' },
  { label: 'Exploit', category: 'exploit' },
  // { label: 'Brute Force', category: 'bruteforce' },
];

const Agentless = () => {
  const [activeStep, setActiveStep] = useState(0);
  const [agents, setAgents] = React.useState([]);
  const [hostname, setHostname] = useState([]);
  const [agentLessMode, setAgentLessMode] = useState(true);
  const [ipAddress, setIpAddress] = useState('');
  const [error, setError] = useState(false);
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState([]);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [hostIps, setHostIps] = useState([]);
  const { userState } = useContext(UserContext);
  
  const handleTextFiledChange = (event) => {
    const value = event.target.value;
    setIpAddress(value);

    const ipv4Pattern = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;

    if (ipv4Pattern.test(value)) {
      setError(false);
    } else {
      setError(true);
    }
  };

  const handleAttack = async () => {
    setActiveStep(0);
    setLoading(true);
    setLogs([]);
    setSnackbarOpen(true);

    let ipForAttack = '';

    if (agentLessMode) {
      ipForAttack = ipAddress;
    } else {
      ipForAttack = hostIps[0];
    }
    
    console.log(ipForAttack);

    // 기본 scan
    setLogs((prevLogs) => [...prevLogs, 'Basic Nmap scan started...']);
    const basicScanResponse = await fetchBasicScanByIP(ipForAttack);
    if (basicScanResponse.status === 200) {
      const data = await basicScanResponse.json();
      const enter_parsing_data = data.result.split("\n");
      for (let i = 0; i < enter_parsing_data.length; i++) {
        setLogs((prevLogs) => [...prevLogs, enter_parsing_data[i]], '');
      }
    }

    // 서비스 정보 수집 
    setLogs((prevLogs) => [...prevLogs, 'Service Information Gathering started...']);
    const serviceScanResponse = await fetchServiceScanByIP(ipForAttack);
    if (serviceScanResponse.status === 200) {
      const data = await serviceScanResponse.json();
      const enter_parsing_data = data.result.split("\n");
      for (let i = 0; i < enter_parsing_data.length; i++) {
        setLogs((prevLogs) => [...prevLogs, enter_parsing_data[i]], '');
      }

    }

    // 서비스 출력
    const servicesResponse = await fetchGetServicesByIP(ipForAttack);
    if (servicesResponse.status === 200) {
      const data = await servicesResponse.json();
      // setLogs((prevLogs) => [...prevLogs, data.result]);
      setLogs((prevLogs) => [...prevLogs, 'Find services:']);
      data.map((service) => { 
        const tmp = `Service: ${service.service}, Port: ${service.port}, Banner: ${service.banner || 'N/A'}`;
        setLogs((prevLogs) => [...prevLogs, tmp]);
      });
      console.log(data);
    } else {
      setLogs((prevLogs) => [...prevLogs, 'Failed to get services']);
    }

    // Attack
    for (let i = 0; i < steps.length; i++) {
      const step = steps[i];
      try{
        const response = await fetchPentestToolsByCategory(step.category);
        if (response.status === 200){
          const data = await response.json();
          console.log(step.label, data);
          setLogs((prevLogs) => [...prevLogs, `${step.label} started...`]);
          for (let j = 0; j < data.length; j++) {
            const tool = data[j];
            const attackResponse = await fetchAttackWithIPAndToolID(ipForAttack, tool.pentid);
            if (attackResponse.status === 200) {
              const attackData = await attackResponse.json();
              const enter_parsing_data = attackData.result.split("\n");
              for (let i = 0; i < enter_parsing_data.length; i++) {
                setLogs((prevLogs) => [...prevLogs, enter_parsing_data[i]]);
              }
            } else {
              setLogs((prevLogs) => [...prevLogs, `Failed to execute ${tool.name}`]);
            }
          }
          
          setActiveStep(i);
        } else {
          throw new Error(`Failed to get ${step.label}`);
        }
      } catch (error) {
        console.error(error);
        // setLogs((prevLogs) => [...prevLogs, `Failed to execute ${step.label}`]);
        // setActiveStep(i);
        // break;
      }
    }

    setLoading(false);
  };

  const handleSnackbarClose = () => {
    setSnackbarOpen(false);
  };

  return (
    <div style={{ padding: 20 }}>
      <Typography variant="h4" sx={{ fontWeight: 'bold' }}> CVE ATTACK </Typography>
      <Box sx={{ marginY: 4, display: 'flex', alignItems: 'center' }}>
        <RadioGroup aria-label="position" name="position" defaultValue="top" sx={{ mr: 5 }}>
          <FormControlLabel
            control={<Radio color="primary" />}
            label="IP Address"
            checked={agentLessMode}
            onChange={() => setAgentLessMode(true)}
          />
          <FormControlLabel
            control={<Radio color="primary" />}
            label="Agent Select"
            checked={!agentLessMode}
            onChange={() => setAgentLessMode(false)}
          />
        </RadioGroup>
        {!agentLessMode ? (
          <AgentSelect hostname={hostname} setHostname={setHostname} loading={false} agentLessMode={agentLessMode} setAgents={setAgents} agents={agents} setHostIps={setHostIps}/>
        ) : (
          <TextField
            id="outlined-basic"
            label="IP Address"
            variant="outlined"
            placeholder="127.0.0.1"
            value={ipAddress}
            onChange={handleTextFiledChange}
            error={error}
            helperText={error ? "Invalid IPv4 address" : ""}
            sx={{ m: 1, mt: 2, width: 300 }}
          />
        )}
        <Button
          variant="contained"
          disabled={((error || !ipAddress) && agentLessMode) || (!agentLessMode && hostname === '') || loading}
          sx={{ height: 48, ml: 5, mt: 2 }}
          onClick={handleAttack}
        >
          {loading ? <CircularProgress size={24} /> : 'Attack'}
        </Button>
      </Box>
      <Box sx={{ padding: 5, border: 2, borderColor: '#3A74CD', height: 'auto', width: '80%', mt: 3 }}>
        <Stepper activeStep={activeStep} orientation="horizontal" alternativeLabel>
          {steps.map((step, index) => (
            <Step key={step.label}>
              <StepLabel
                sx={{
                  '& .MuiStepIcon-root': { width: 32, height: 32 },
                  '& .MuiStepLabel-label': { fontSize: 16 },
                }}
              >
                {step.label}
              </StepLabel>
            </Step>
          ))}
        </Stepper>
      </Box>
      <Paper elevation={3} sx={{ padding: 3, marginTop: 4, width: '80%', backgroundColor: '#f5f5f5' }}>
        <Typography variant="h6" sx={{ marginBottom: 2 }}>Logs</Typography>
        <Box sx={{ maxHeight: 500, overflowY: 'auto' }}>
          {logs.length === 0 ? (
            <Typography variant="body1" sx={{ color: '#999' }}>No logs yet...</Typography>
          ) : (
            logs.map((log, index) => (
              <Typography key={index} variant="body2">{log}</Typography>
            ))
          )}
        </Box>
      </Paper>
      <Snackbar
        open={snackbarOpen}
        onClose={handleSnackbarClose}
        message={`Executing ${steps[activeStep].label}...`}
        autoHideDuration={2000}
      />
    </div>
  );
};

export default Agentless;
