import React, {useContext} from 'react';
import { UserContext } from '../../core/user';



import { useNavigate } from 'react-router-dom';

import { Typography, Button, CircularProgress } from '@mui/material'

import AttackMap from './module/AttackMap';
import AgentSelect from './module/AgentSelect';
import { fetchGetAttackTactics, fetchGetAttackTechniques } from '../../services/AttackMapServices';
import { fetchRealAttackWithUIDTIDAID } from '../../services/AttackServices';
import { fetchGetAgentPrepareStatus } from '../../services/AgentServices';
import { fetchCheckSuccess } from '../../services/ResultServices';

const TACTICID = [
    'TA0043',
    'TA0042',
    'TA0001',
    'TA0002',
    'TA0003',
    'TA0004',
    'TA0005',
    'TA0006',
    'TA0007',
    'TA0008',
    'TA0009',
    'TA0011',
    'TA0010',
    'TA0040'
]

// const status = [
//     'init',
//     'success',
//     'fail',
// ]


const Agent = ({view}) => {
    const [hostname, setHostname] = React.useState([]);
    const [agents, setAgents] = React.useState([]);
    const [finishAttack, setFinishAttack] = React.useState(false);
    const navigate = useNavigate();
    const [tactics, setTactics] = React.useState([]);
    const [groupedTechniques, setGroupedTechniques] = React.useState({});
    const [loading, setLoading] = React.useState(false);
    const { userState } = useContext(UserContext);
    const [ finishTids, setFinishTids ] = React.useState([]);

    const handleAttack = async () => {
        setLoading(true);

        for (const tacticid of TACTICID) {
            if (groupedTechniques[tacticid]) {
                for (const technique of groupedTechniques[tacticid]) {
                    for (const agent of agents) {
                        if (hostname.includes(agent.hostname)) {
                            setGroupedTechniques(prev => {
                                const updatedTechniques = prev[tacticid].map(t => {
                                    if (t.tid === technique.tid) {
                                        return { ...t, status: 'loading' }; // 상태 업데이트
                                    }
                                    return t;
                                });
                                return { ...prev, [tacticid]: updatedTechniques };
                            });

                            const prepareCheck = await fetchGetAgentPrepareStatus(agent.id);
                            let prepareStatus = await prepareCheck.json();
                            
                            while (prepareStatus.status !== 'finish') {
                                await new Promise(r => setTimeout(r, 1000)); // 1초 딜레이
                                const prepareCheck = await fetchGetAgentPrepareStatus(agent.id);
                                prepareStatus = await prepareCheck.json();
                                console.log('prepareStatus', prepareStatus);
                            }
                            
                            const response = await fetchRealAttackWithUIDTIDAID(userState.uid, technique.tid, agent.id);
                            const data = await response.json();                            
                            
                            if(response.status === 200) {
                                setFinishTids(prev => [...prev, technique.tid]);
                            } else {
                                setGroupedTechniques(prev => {
                                    const updatedTechniques = prev[tacticid].map(t => {
                                        if (t.tid === technique.tid) {
                                            return { ...t, status: 'fail' }; // 상태 업데이트
                                        }
                                        return t;
                                    });
                                    return { ...prev, [tacticid]: updatedTechniques };
                                });
                            }
                        }
                    }
                }
            }
        }
    
        setFinishAttack(true);
        setLoading(false);
    };

    React.useEffect(() => {
        if(finishTids.length === 0) {
            return ;
        }
        // fetchchecksuccess 해서 true이면 색깔을 success, false이면 fail로 바꿔주기. 근데, status가 이미 존재하면 그대로 두기
        // 해줘
        const checkSuccess = async () => {
            for (const tacticid of TACTICID) {
                if (groupedTechniques[tacticid]) {
                    for (const technique of groupedTechniques[tacticid]) {
                        if (finishTids.includes(technique.tid)) {
                            const response = await fetchCheckSuccess(userState.uid, technique.tid);
                            const data = await response.json();
                            if (response.status === 200) {
                                setGroupedTechniques(prev => {
                                    const updatedTechniques = prev[tacticid].map(t => {
                                        if (t.tid === technique.tid) {
                                            return { ...t, status: data ? 'success' : 'fail' };
                                        }
                                        return t;
                                    });
                                    return { ...prev, [tacticid]: updatedTechniques };
                                });
                            } else {
                                setGroupedTechniques(prev => {
                                    const updatedTechniques = prev[tacticid].map(t => {
                                        if (t.tid === technique.tid) {
                                            return { ...t, status: 'fail' };
                                        }
                                        return t;
                                    });
                                    return { ...prev, [tacticid]: updatedTechniques };
                                });
                            }
                        }
                    }
                }
            }
        }

        checkSuccess();

    }, [finishTids]);
    
    React.useEffect(() => {
        // Fetch tactics
        fetchGetAttackTactics().then((response) => {
            if (response.status === 200) {
                response.json().then((data) => {
                    setTactics(data);
                });
            }
        });

        // Fetch techniques
        fetchGetAttackTechniques().then((response) => {
            if (response.status === 200) {
                response.json().then((data) => {
                    // Group techniques by their taid
                    const grouped = data.reduce((acc, technique) => {
                        const taid = technique.taid;
                        if (!acc[taid]) {
                            acc[taid] = [];
                        }
                        // acc[taid].push(technique);
                        acc[taid].push({ ...technique, status: 'init' });
                        return acc;
                    }, {});
                    setGroupedTechniques(grouped);
                    console.log('s',grouped);
                });
            }
        });
    }, []);


    return (
        <div>
            {!view && 
            <>
            <Typography variant='h4' sx={{fontWeight:'bold'}}> MITRE ATT&CK </Typography>
            <div className='flex flex-row' style={{display:'flex', alignItems:'center', gap: '16px'}}>
                <AgentSelect hostname={hostname} setHostname={setHostname} loading={loading} agents={agents} setAgents={setAgents}/>
                <Button variant='contained' disabled={hostname == "" || loading ? true : false} sx={{height:48, mt:2}} onClick={handleAttack}>
                    {loading ? <CircularProgress/> : 'Attack'}
                </Button>
                <Button
                    disabled={!finishAttack}
                    variant='contained'
                    sx={{height:48, mt:2}}
                    onClick={()=>{navigate('/pentest/result')}}
                >
                    GoTo Result
                </Button>
                <br />
            </div>
            </>
            }
            <br />
            <AttackMap tactics={tactics} groupedTechniques={groupedTechniques}/>
            
        </div>
    )
}

export default Agent;