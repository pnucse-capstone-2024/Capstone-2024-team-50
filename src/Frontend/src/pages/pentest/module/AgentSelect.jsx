import * as React from 'react';
import { Theme, useTheme } from '@mui/material/styles';
import OutlinedInput from '@mui/material/OutlinedInput';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import Chip from '@mui/material/Chip';
import Box from '@mui/material/Box';
import { useContext } from 'react';
import { UserContext } from '../../../core/user';
import { fetchConnectedAgents } from '../../../services/AgentServices';

const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};

function getStyles(name, hostname, theme) {
  return {
    fontWeight:
      hostname.indexOf(name) === -1
        ? theme.typography.fontWeightRegular
        : theme.typography.fontWeightMedium,
  };
}

export default function AgentSelect({ hostname, setHostname, loading, agentLessMode, agents, setAgents, setHostIps }) {
  const theme = useTheme();
  const { userState } = useContext(UserContext);

  React.useEffect(() => {
    fetchConnectedAgents(userState.uid)
      .then((response) => {
        response.json().then((data) => {
          setAgents(data && data.length > 0 ? data : []);
        });
      })
      .catch((error) => {
        console.error(error);
      });
  }, [userState.uid]);

  const handleChange = (event) => {
    const {
      target: { value },
    } = event;
    setHostname(
      typeof value === 'string' ? value.split(',') : value
    );

    if (setHostIps){
      const hostIps = agents.filter((agent) => value.includes(agent.hostname)).map((agent) => agent.ip);
      setHostIps(hostIps);  
    }
  };


  const handleDelete = (nameToDelete) => () => {
    setHostname((prev) => prev.filter((name) => name !== nameToDelete));

    if (setHostIps){
      const hostIps = agents.filter((agent) => hostname.includes(agent.hostname)).map((agent) => agent.ip);
      setHostIps(hostIps);  
    }
  };

  return (
    <div>
      <FormControl sx={{ m: 1, width: 300, mt: 3 }}>
        <Select
          multiple
          displayEmpty
          value={hostname}
          onChange={handleChange}
          disabled={loading || agentLessMode}
          input={<OutlinedInput />}
          renderValue={(selected) => (
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {selected && selected.length > 0 ? selected.map((value) => (
                <Chip key={value} label={value} onDelete={handleDelete(value)} />
              )) : null}
            </Box>
          )}
          MenuProps={MenuProps}
          inputProps={{ 'aria-label': 'Without label' }}
        >
          <MenuItem disabled value="">
            <em>Select Agent's Hostname</em>
          </MenuItem>
          {agents && agents.length > 0 ? agents.map((agent) => (
            <MenuItem
              key={agent.id}
              value={agent.hostname}
              style={getStyles(agent.hostname, hostname, theme)}
            >
              {agent.hostname}
            </MenuItem>
          )) : null}
        </Select>
      </FormControl>
    </div>
  );
}
