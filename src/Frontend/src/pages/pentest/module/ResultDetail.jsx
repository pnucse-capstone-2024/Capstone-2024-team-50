import React, { useEffect, useState } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, List, ListItem, ListItemText, Divider, Typography, Box } from '@mui/material';
import { fetchGetAttackCommands } from '../../../services/AttackMapServices';

const ResultDetailDialog = ({ open, onClose, attacks, mitigation, scenario, inputCommands, outputCommands }) => {
    // const [commands, setCommands] = useState([]);

    // useEffect(() => {
    //     fetchGetAttackCommands().then((response) => {
    //         if (response.status === 200) {
    //             response.json().then((data) => {
    //                 setCommands(data);
    //             });
    //         }
    //     });
    // }, []);

    return (
        <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
            <DialogTitle>
                <Typography variant="h5" sx={{ fontWeight: 'bold', textAlign: 'center' }}>
                    Attack Scenario Detail
                </Typography>
            </DialogTitle>
            <Divider />
            <DialogContent>
                <Box sx={{ mb: 2, p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
                    <Typography variant="h6" sx={{ fontWeight: 'bold', textAlign: 'center' }}>
                        {scenario}
                    </Typography>
                </Box>
                <Divider sx={{ my: 2 }} />
                {/* <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                    {!linux && (<>공격 순서 및 방어책</>)}
                </Typography>
                {linux && (
                    <Typography variant="body1" sx={{ fontWeight: 'bold', color: '#ff5722' }}>
                        Linux 커널 버전 3.15 ~ 6.1.76 / 6.2 ~ 6.6.15 / 6.7 ~ 6.7.3을 사용하는 경우 커널을 최신 버전으로 업데이트합니다.
                    </Typography>
                )} */}
                {/* {!linux && ( */}
                {/* {!linux && ( */}
                    <>
                        <Divider sx={{ my: 2 }} />
                        {attacks.map((attack, index) => (
                            <List key={index} sx={{ mb: 2, p: 2, backgroundColor: '#e3f2fd', borderRadius: 2 }}>
                                <ListItem>
                                    <ListItemText
                                        primary={`Attack ${index + 1}: ${attack}`}
                                        primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold' }}
                                        secondary={attack.description}
                                    />
                                </ListItem>
                                <ListItem>
                                    <ListItemText
                                        primary="Mitigation"
                                        secondary={mitigation[index]}
                                        primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold', color: '#ff5722' }}
                                    />
                                </ListItem>
                                <ListItem>
                                    <ListItemText
                                        primary="사용된 Command"
                                        secondary={inputCommands[index]}
                                        primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold', color: '#4caf50' }}
                                    />
                                </ListItem>
                                <ListItem>
                                    <ListItemText
                                        primary="Command 결과"
                                        secondary={outputCommands[index] || 'Command 실행 결과가 없습니다.'}
                                        primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold', color: '#4caf50' }}
                                    />
                                </ListItem>
                            </List>
                        ))}
                    </>
                {/* )} */}

                
            </DialogContent>
            <DialogActions>
                <Button onClick={onClose} variant="contained" color="primary">
                    Close
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default ResultDetailDialog;
