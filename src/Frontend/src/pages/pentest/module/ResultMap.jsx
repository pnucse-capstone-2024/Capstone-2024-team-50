import React, {useEffect} from 'react';
import {
    Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Tooltip, Box, Card, CardContent
} from '@mui/material';
import { fetchGetAttackTactics, fetchGetAttackTechniques, fetchGetAttacks } from '../../../services/AttackMapServices';

export default function AttackMap({ ATTACK_SCENARIO }) {
    const [tactics, setTactics] = React.useState([]);
    const [groupedTechniques, setGroupedTechniques] = React.useState({});
    const [attacks, setAttacks] = React.useState([]);

    useEffect(() => {
        // Fetch attacks
        fetchGetAttacks().then((response) => {
            if (response.status === 200) {
                response.json().then((data) => {
                    const filteredAttacks = data.filter(attack => ATTACK_SCENARIO.includes(attack.name));
                    setAttacks(filteredAttacks);
                });
            }
        });
    }, []);

    useEffect(() => {
        // Fetch tactics
        fetchGetAttackTactics().then((response) => {
            if (response.status === 200) {
                response.json().then((data) => {
                    setTactics(data);
                });
            }
        });

        // Fetch techniques
        fetchGetAttackTechniques().then((response) => {
            if (response.status === 200) {
                response.json().then((data) => {
                    // Get all TIDs from filtered attacks
                    const attackTIDs = attacks.map(attack => attack.tid);

                    // Group techniques by their taid, but only include techniques that are in attackTIDs
                    const grouped = data.reduce((acc, technique) => {
                        if (attackTIDs.includes(technique.tid)) {
                            const taid = technique.taid;
                            if (!acc[taid]) {
                                acc[taid] = [];
                            }
                            acc[taid].push(technique);
                        }
                        return acc;
                    }, {});
                    setGroupedTechniques(grouped);
                });
            }
        });
    }, [attacks]);
    // Filter tactics to only include those with techniques in TIDS
    const filteredTactics = tactics.filter(tactic => groupedTechniques[tactic.taid] && groupedTechniques[tactic.taid].length > 0);

    return (
        <TableContainer>
            <Table sx={{ minWidth: 650 }} aria-label="simple table">
                <TableHead>
                    <TableRow>
                        {filteredTactics.map((tactic) => (
                            <TableCell key={tactic.taid} sx={{ textAlign: 'center', borderBottom: '2px solid #ddd' }}>
                                <Typography variant='h6' sx={{ fontWeight: 'bold' }}>
                                    {tactic.name}
                                </Typography>
                            </TableCell>
                        ))}
                    </TableRow>
                </TableHead>
                <TableBody>
                    <TableRow>
                        {filteredTactics.map((tactic) => (
                            <TableCell key={tactic.taid} sx={{ padding: 2, verticalAlign: 'top', borderRight: tactic.name === 'Impact' ? '' : '2px solid #ddd', borderBottom: 'none' }}>
                                {groupedTechniques[tactic.taid] && groupedTechniques[tactic.taid].length > 0 ? (
                                    <Box>
                                        {groupedTechniques[tactic.taid].map((technique) => (
                                            <Tooltip
                                                key={technique.tid}
                                                title={
                                                    <Box sx={{ p: 1 }}>
                                                        <Typography variant='subtitle2' sx={{ fontWeight: 'bold' }}>
                                                            {technique.tid}
                                                        </Typography>
                                                        <Typography>
                                                            {technique.name}
                                                        </Typography>
                                                    </Box>
                                                }
                                                arrow
                                                placement='right'
                                            >
                                                <Box sx={{ mb: 1, cursor: 'pointer' }}>
                                                    <Card sx={{ boxShadow: 1, borderRadius: 2, backgroundColor: '#00FF0030' }}>
                                                        <CardContent>
                                                            <Typography variant='body2'>
                                                                {technique.name}
                                                            </Typography>
                                                        </CardContent>
                                                    </Card>
                                                </Box>
                                            </Tooltip>
                                        ))}
                                    </Box>
                                ) : (
                                    <Typography variant='body2' align='center'>
                                        No techniques available
                                    </Typography>
                                )}
                            </TableCell>
                        ))}
                    </TableRow>
                </TableBody>
            </Table>
        </TableContainer>
    );
}
