import React, { useEffect, useState } from 'react';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, List, ListItem, ListItemText, Divider, Typography, Box } from '@mui/material';
import { fetchGetAttackCommands } from '../../../services/AttackMapServices';

const ResultCommands = ({ open, onClose, commands }) => {    

    return (
        <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
            <DialogTitle>
                <Typography variant="h5" sx={{ fontWeight: 'bold', textAlign: 'center' }}>
                    Commands Result
                </Typography>
            </DialogTitle>
            <Divider />
            <DialogContent>
                {/* <Box sx={{ mb: 2, p: 2, backgroundColor: '#f5f5f5', borderRadius: 2 }}>
                    <Typography variant="h6" sx={{ fontWeight: 'bold', textAlign: 'center' }}>
                        {scenario}
                    </Typography>
                </Box> */}
                <Divider sx={{ my: 2 }} />
                    <>
                        {commands && commands.length > 0 ? commands.map((command, index) => (
                            <div key={index}>
                                <Divider sx={{ my: 2 }} />
                                <List sx={{ mb: 2, p: 2, backgroundColor: '#e3f2fd', borderRadius: 2 }}>
                                    <ListItem>
                                        <ListItemText
                                            primary={`InputComand ${index + 1}`}
                                            primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold' }}
                                            secondary={command.input_command}
                                        />
                                    </ListItem>
                                    <ListItem>
                                        <ListItemText
                                            primary="Output"
                                            primaryTypographyProps={{ variant: 'h6', fontWeight: 'bold' }}
                                            secondary={command.output_command}
                                        />
                                    </ListItem>
                                </List>
                            </div>
                        )):null}
                    </>
                {/* )} */}

                
            </DialogContent>
            <DialogActions>
                <Button onClick={onClose} variant="contained" color="primary">
                    Close
                </Button>
            </DialogActions>
        </Dialog>
    );
};

export default ResultCommands;
