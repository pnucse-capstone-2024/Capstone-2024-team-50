import React, { useEffect, useContext, useState } from 'react';
import { UserContext } from '../../core/user';
import { Typography, Box, Paper, Divider, IconButton, CircularProgress, Button, Card, CardContent, Link, ToggleButton, ToggleButtonGroup } from '@mui/material';
import { ExpandMore, ExpandLess } from '@mui/icons-material';
import ResultMap from './module/ResultMap';
import { fetchAgents, fetchgetTest } from '../../services/AgentServices';
import { fetchCVEResult, fetchCVERecord, } from '../../services/UserServices';
import { fetchGetSuccessScenarios, fetchAllResultCommands } from '../../services/ResultServices';
import { fetchGetKaliHosts, fetchGetKaliHostServices } from '../../services/KaliResultServices';

import mac from '../../static/images/mac.png';
import windows from '../../static/images/windows.png';
import linux from '../../static/images/linux.png';

import ResultDetailDialog from './module/ResultDetail';
import ResultCommands from './module/ResultCommands';

const Result = () => {
    const [hostnames, setHostnames] = useState([]);
    const [expandedHostnames, setExpandedHostnames] = useState({});
    const [expandedNonAgentHostnames, setExpandedNonAgentHostnames] = useState({});
    const [dialogOpen, setDialogOpen] = useState(false);

    const [resultCommandsOpen, setResultCommandsOpen] = useState(false);
    const [commandsByAgent, setCommandsByAgent] = useState([]);

    const { userState } = useContext(UserContext);
    const [attack, setAttack] = useState([]);
    const [mitigation, setMitigation] = useState([]);
    const [scenarioDetail, setScenarioDetail] = useState([]);
    const [inputCommands, setInputCommands] = useState([]);
    const [outputCommands, setOutputCommands] = useState([]);
    const [nonAgentHostnames, setNonAgentHostnames] = useState([]);

    const [nonAgentServices, setNonAgentServices] = useState([]);
    const [alignment, setAlignment] = React.useState('all');

    const handleChange = (event, newAlignment) => {
      setAlignment(newAlignment);
    };
  


    const [attackScenarios, setAttackScenarios] = useState({});
    const [attackCommands, setAttackCommands] = useState({});

    const [tmpde, setTmpde] = useState(null);

    const fetchData = (uid) => {
        fetchAgents(uid)
            .then(response => response.json())
            .then(data => {
                setHostnames(data);
            })
            .catch(error => {
                console.error('Error fetching hostnames:', error);
            });

        fetchGetKaliHosts(uid)
            .then(response => response.json())
            .then(data => {
                setNonAgentHostnames(data);
                console.log(data);
            })
            .catch(error => {
                console.error('Error fetching non-agent hostnames:', error);
            });
    };

    useEffect(() => {
        fetchData(userState.uid);
    }, [userState.uid]);

    useEffect(() => {
        if (hostnames && hostnames.length > 0) {
            hostnames.map((hostname, index) => {
                fetchGetSuccessScenarios(hostname.id)
                .then(response => response.json())
                .then(data => {
                    setAttackScenarios(prevState => ({
                        ...prevState,
                        [hostname.hostname]: data
                    }));
                })
                .then(() => {
                    console.log(attackScenarios);
                })
                .catch(error => {
                    console.error('Error fetching hostnames:', error);
                });

                fetchAllResultCommands(userState.uid)
                    .then(response => response.json())
                    .then(data => {
                        setAttackCommands(prevState => ({
                            ...prevState,
                            [hostname.hostname]: data
                        }));
                        console.log(data);
                    })
                    .catch(error => {
                        console.error('Error fetching hostnames:', error);
                    });
            });
        }
    }, [hostnames]);

    useEffect(() => {
        // console.log(attackScenarios);
        console.log(attackCommands);
    }, [attackScenarios, attackCommands]);

    const handleToggle = (index) => {
        setExpandedHostnames(prevState => ({
            ...prevState,
            [index]: !prevState[index]  // Toggle the expanded state
        }));

    };

    const handleNonAgentToggle = (index) => {
        setExpandedNonAgentHostnames(prevState => ({
            ...prevState,
            [index]: !prevState[index]  // Toggle the expanded state
        }));
    };

    const handleResultCommandsOpen = (commands) => {
        setCommandsByAgent(commands);
        console.log(commands);
        setResultCommandsOpen(true);
    };

    const handleDialogOpen = (attacks, mitigations, scenario, inputCommands, output_commands) => {
        setAttack(attacks)
        setMitigation(mitigations)
        setScenarioDetail(scenario)
        setInputCommands(inputCommands)
        setOutputCommands(output_commands)
        setDialogOpen(true);
    };

    const handleDialogClose = () => {
        setDialogOpen(false);
    };

    let rid = 1;

    const loadCVEResult = () => {
        if (userState && userState.uid) {

            fetchCVEResult(rid).then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        console.log("cve:", data);
                    });
                } else {
                    console.error('cve result load error!');
                }
            });

            fetchCVERecord(rid).then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        console.log("detailed cve:", data);
                    });
                } else {
                    console.error('detailed cve result load error!');
                }
            });   
        }
        else console.warn('User state or user UID is not available');
    }

    useEffect(() => {
        loadCVEResult();
    }
    , []);

    return (
        <>
            <ToggleButtonGroup
                color="primary"
                value={alignment}
                exclusive
                onChange={handleChange}
                aria-label="Platform"
                >
                <ToggleButton value="all">ALL</ToggleButton>
                <ToggleButton value="mitre">MITRE ATT&CK</ToggleButton>
                <ToggleButton value="cve">CVE ATTACK</ToggleButton>
            </ToggleButtonGroup>
            <Box
                sx={{
                    p: 4,
                    backgroundColor: '#f5f5f5',
                    minHeight: '100vh',
                    display: 'flex',
                    flexDirection: 'column',
                }}
            >
                {alignment === 'all' || alignment === 'mitre' ? (
                    hostnames && hostnames.length > 0 ? hostnames.map((hostname, index) => (
                        <Paper
                            key={index}
                            elevation={3}
                            sx={{
                                p: 4,
                                width: '100%',
                                textAlign: 'center',
                                backgroundColor: '#ffffff',
                                borderRadius: '15px',
                                mb: 3
                            }}
                        >
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', cursor: 'pointer' }}
                                onClick={() => handleToggle(index)}
                            >
                                <Typography variant='h6' sx={{ fontWeight: 'bold', color: '#555555' }}>
                                    {hostname.os.toLowerCase().includes('windows') && (
                                        <img src={windows} alt='windows' style={{ width: '30px', height: '30px' }} />
                                    )}
                                    {hostname.os.toLowerCase().includes('linux') && (
                                        <img src={linux} alt='linux' style={{ width: '30px', height: '30px' }} />
                                    )}
                                    {hostname.os.toLowerCase().includes('mac') && (
                                        <img src={mac} alt='mac' style={{ width: '40px', height: '40px' }} />
                                    )}
                                    HOSTNAME: {hostname.hostname}
                                </Typography>
                                <IconButton>
                                    {!expandedHostnames[index] ? <ExpandLess /> : <ExpandMore />}
                                </IconButton>
                            </Box>
                            {!expandedHostnames[index] && (
                                <>
                                    <Divider sx={{ my: 2 }} />
                                    <Button
                                        variant='outlined'
                                        sx={{fontWeight:'bold', fontSize:'1.2rem'}}
                                        onClick={()=>{handleResultCommandsOpen(attackCommands[hostname.hostname][hostname.id])}}
                                    >
                                        View ALL
                                    </Button>
                                    <Divider sx={{ my: 2 }} />
                                    {attackScenarios[hostname.hostname] && attackScenarios[hostname.hostname].length > 0 && 
                                        attackScenarios[hostname.hostname].map((attack, index) => (
                                            <>
                                                <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                                    ATTACK SCENARIO: {attack.name}
                                                </Typography>
                                                <ResultMap ATTACK_SCENARIO={attack.attack_names} />
                                                <Button
                                                    variant="outlined"
                                                    sx={{ mt: 2 }}
                                                    onClick={() => handleDialogOpen(attack.attack_names, attack.descriptions, attack.description, attack.input_commands, attack.output_commands)}
                                                >
                                                    View Detail
                                                </Button>
                                                <Divider sx={{ my: 2 }} />
                                            </>                                    
                                        ))
                                    }
                                    
                                    {/* {hostname.os.toLowerCase().includes('linux')  && tmpde && (
                                        <>
                                            <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                                취약점 : CVE-2024-1086 / User-After-Free Vulnerability
                                            </Typography>
                                            <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.cve_linux} />
                                            <Button
                                                variant="outlined"
                                                sx={{ mt: 2 }}
                                                onClick={() => handleDialogOpen(ATTACK_SCENARIOS.cve_linux, MITIGATION.cve_linux, SCENARIO_DETAIL.cve_linux, COMMANDS.cve_linux, true)}
                                            >
                                                View Detail
                                            </Button>
                                            <Divider sx={{ my: 2 }} />
                                        
                                            <Typography variant='h6' sx={{ fontWeight: 'bold', textAlign: 'left' }}>
                                                ATTACK SCENARIO: Steal Sensitive File
                                            </Typography>
                                            <ResultMap ATTACK_SCENARIO={ATTACK_SCENARIOS.steal_file_linux} />
                                            <Button
                                                variant="outlined"
                                                sx={{ mt: 2 }}
                                                onClick={() => handleDialogOpen(ATTACK_SCENARIOS.steal_file_linux, MITIGATION.steal_file_linux, SCENARIO_DETAIL.steal_file_linux, COMMANDS.steal_file_linux)}
                                            >
                                                View Detail
                                            </Button>
                                            <Divider sx={{ my: 2 }} />
                                        </>
                                    )} */}
                                </>
                            )}
                            
                        </Paper>
                    )) : null
                ) : null}
                {alignment === 'all' || alignment === 'cve' ? (
                    nonAgentHostnames && nonAgentHostnames.length > 0 ? nonAgentHostnames.map((hostname, index) => (
                        <Paper
                            key={index}
                            elevation={3}
                            sx={{
                                p: 4,
                                width: '100%',
                                textAlign: 'center',
                                backgroundColor: '#ffffff',
                                borderRadius: '15px',
                                mb: 3
                            }}
                        >
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', cursor: 'pointer' }}
                                onClick={() => handleNonAgentToggle(index)}
                            >
                                <Typography variant='h6' sx={{ fontWeight: 'bold', color: '#555555' }}>
                                    {hostname.os.toLowerCase().includes('windows') && (
                                        <img src={windows} alt='windows' style={{ width: '30px', height: '30px' }} />
                                    )}
                                    {hostname.os.toLowerCase().includes('linux') && (
                                        <img src={linux} alt='linux' style={{ width: '30px', height: '30px' }} />
                                    )}
                                    {hostname.os.toLowerCase().includes('mac') && (
                                        <img src={mac} alt='mac' style={{ width: '40px', height: '40px' }} />
                                    )}
                                    IP Address: {hostname.ip}
                                </Typography>
                                <IconButton>
                                    {!expandedNonAgentHostnames[index] ? <ExpandLess /> : <ExpandMore />}
                                </IconButton>
                            </Box>
                            {!expandedNonAgentHostnames[index] && (
                                <>
                                    <Divider sx={{ my: 2 }} />
                                    {hostname.services && hostname.services.length > 0 && (
                                        <>
                                            <Typography variant='h5' sx={{ fontWeight: 'bold', textAlign: 'left', color: '#3f51b5', marginBottom: 2 }}>
                                                CVE LIST
                                            </Typography>
                                            {hostname.services.map((service, index) => (
                                                <>
                                                    <Box sx={{ padding: 2, backgroundColor: '#f5f5f5', borderRadius: 2, boxShadow: 2 }}>
                                                        <Typography variant='h6' sx={{ fontWeight:'bold', textAlign: 'left', marginBottom: 2 }}>
                                                            Find Service : {service.service} - {service.port}
                                                        </Typography>
                                                        {service.vulnerabilities && service.vulnerabilities.length > 0 && (
                                                            <>
                                                                {service.vulnerabilities.map((cve, index) => (
                                                                    <Card key={index} sx={{ marginBottom: 2, boxShadow: 3, borderRadius: 2, backgroundColor: '#ffffff' }}>
                                                                        <CardContent>
                                                                            <Typography variant='h6' sx={{ textAlign: 'left', fontWeight: 'bold', color: '#ff5722' }}>
                                                                                {cve.name}
                                                                            </Typography>
                                                                            <Typography variant='body1' sx={{ textAlign: 'left', color: '#757575', marginBottom: 1 }}>
                                                                                {cve.description}
                                                                            </Typography>
                                                                            <Link href={cve.url} target="_blank" rel="noopener" variant='body2' sx={{ textAlign: 'left', color: '#2196f3' }}>
                                                                                {cve.url}
                                                                            </Link>
                                                                        </CardContent>
                                                                    </Card>
                                                                ))}
                                                            </>
                                                        )}
                                                    </Box>

                                                </>
                                            ))}

                                            <Divider sx={{ my: 2 }} />
                                        </>
                                    )

                                    }
                                </>
                            )}

                        </Paper>
                    )) : null
                ) : null}
                <ResultDetailDialog
                    open={dialogOpen}
                    onClose={handleDialogClose}
                    attacks={attack}
                    mitigation={mitigation}
                    scenario={scenarioDetail}
                    inputCommands={inputCommands}
                    outputCommands={outputCommands}
                />
                <ResultCommands open={resultCommandsOpen} onClose={()=>{setResultCommandsOpen(false)}} commands={commandsByAgent} />
            </Box>
        </>
    );
};

export default Result;

