from datetime import datetime
from sqlalchemy.orm import Session, joinedload

from sqlalchemy import and_

from typing import List

from . import models, schemas

def get_pentool(db: Session, pentid: int):
    return db.query(models.Pentool).filter(
        models.Pentool.pentid == pentid
    ).first()

def get_nmap_basic(db: Session):
    return db.query(models.Pentool).filter(
        models.Pentool.name == 'nmap_basic'
    ).first()

def get_nmap_service_scan(db: Session):
    return db.query(models.Pentool).filter(
        models.Pentool.name == 'nmap_service_scan'
    ).first()

def get_pentools(db: Session):
    return db.query(models.Pentool).all()

def get_pentools_by_category_service(db: Session, category: str, service: str):
    return db.query(models.Pentool).filter(
        and_(
            models.Pentool.category == category,
            models.Pentool.service == service
        )
    ).all()

def get_pentool_by_service_and_id(db: Session, service: str, pentid: int):
    return db.query(models.Pentool).filter(
        and_(
            models.Pentool.service == service,
            models.Pentool.pentid == pentid
        )
    ).first()

def get_pentools_by_category(db: Session, category: str):
    return db.query(models.Pentool).filter(
        models.Pentool.category == category
    ).all()

def create_pentool(db: Session, Pentool: schemas.PentoolCreate) -> schemas.Pentool:
    db_pentool = models.Pentool(
        name=Pentool.name,
        category=Pentool.category,
        service=Pentool.service,
        details=Pentool.details,
        command=Pentool.command,
        context=Pentool.context
    )
        
    db.add(db_pentool)
    db.commit()
    db.refresh(db_pentool)
    
    return db_pentool

def update_pentool(db: Session, pentid: int, pentool: schemas.PentoolUpdate) -> schemas.Pentool:
    db_pentool = db.query(models.Pentool).filter(
        models.Pentool.pentid == pentid
    ).first()
    
    if not db_pentool:
        return None
    
    db_pentool.name = pentool.name
    db_pentool.category = pentool.category
    db_pentool.service = pentool.service
    db_pentool.details = pentool.details
    db_pentool.command = pentool.command
    db_pentool.context = pentool.context

    
    db.commit()
    db.refresh(db_pentool)
    
    return db_pentool

def delete_pentool(db: Session, pentid: int):
    pentool = db.query(models.Pentool).filter(
        models.Pentool.pentid == pentid
    ).first()
    
    if not pentool:
        return None
    
    db.query(models.Pentool).filter(
        models.Pentool.pentid == pentid
    ).delete(synchronize_session='fetch')

    db.delete(pentool)
    db.commit()
    
    return pentool

# 모든 pentool 삭제
def delete_all_pentools(db: Session):
    db.query(models.Pentool).delete()
    db.commit()
    
    return True
    