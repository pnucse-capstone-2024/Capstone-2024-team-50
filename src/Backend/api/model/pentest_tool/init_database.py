from typing import Annotated

from fastapi import Depends

from sqlalchemy.orm import Session

from model.database import engine, get_db, Base

from . import crud, schemas

def init_database(engine: engine, db: Annotated[Session, Depends(get_db)]):
    Base.metadata.create_all(bind=engine)

    try:
        check = crud.get_pentools(db)
        if check:
            return {"result": "already set"}
        
        pt0_1 = schemas.PentoolCreate(name="nmap_service_scan", category="any", service="any", details="service scan using Nmap", command="sudo nmap [IP]", context="")
        pt0 = schemas.PentoolCreate(name="nmap_basic", category="any", service="any", details="Recon using Nmap", command="sudo nmap -sV -p [PORT] [IP]", context="")
        pt1 = schemas.PentoolCreate(name="nmap", category="recon", service="http", details="Recon using Nmap HTTP scripts", command="sudo nmap -sT -sV -Pn -vv -p [PORT] --script-args=unsafe=1 --script='http-adobe-coldfusion-apsa1301,http-apache-negotiation,http-apache-server-status,http-aspnet-debug,http-auth-finder,http-axis2-dir-traversal,http-bigip-cookie,http-cakephp-version,http-coldfusion-subzero,http-comments-displayer,http-cookie-flags,http-cors,http-cross-domain-policy,http-errors,http-favicon,http-generator,http-git,http-iis-webdav-vuln,http-mcmp,http-methods,http-method-tamper,http-mobileversion-checker,http-ntlm-info,http-passwd,http-phpmyadmin-dir-traversal,http-phpself-xss,http-php-version,http-put,http-robots.txt,http-security-headers,http-server-header,http-shellshock,http-svn-enum,http-svn-info,http-title,http-trace,http-vuln*,http-webdav-scan,weblogic-t3-info' --script-args http.useragent='Mozilla/5.0 (Windows NT 6.1; WOW64; rv:64.0) Gecko/20100101 Firefox/64.0' --stats-every 10s -d [IP]", context="")
        pt2 = schemas.PentoolCreate(name="halberd", category="recon", service="http", details="HTTP load balancer detection", command="halberd -v [URL]", context="")
        pt3 = schemas.PentoolCreate(name="wig", category="recon", service="http", details="Fingerprint several CMS and web/application servers", command="wig -q -a -t 10 -vvv [URL]", context="")
        pt5 = schemas.PentoolCreate(name="waf-detection", category="recon", service="http", details="Identify and fingerprint WAF products protecting website", command="wafw00f -v -a [URL]", context="")
        pt6 = schemas.PentoolCreate(name="identywaf", category="recon", service="http", details="Identify and fingerprint WAF products protecting website", command="python3 root/identYwaf/identYwaf.py [URL]", context="")
        pt8 = schemas.PentoolCreate(name="metasploit", category="recon", service="http", details="Detect WebDAV on webserver", command="sudo msfconsole -q -x 'use auxiliary/scanner/http/webdav_scanner; set RHOSTS [IP]; set RHOST [IP]; set RPORT [PORT]; [HTTPS true=\"set SSL true\"]; set VERBOSE true; run; exit'", context="")
        pt9 = schemas.PentoolCreate(name="vulners-lookup", category="vulnlookup", service="any", details="Vulnerabilities lookup (language, framework, jslib, cms, server, appserver) on Vulners.com", command="python3 root/vulners-lookup/vulners-lookup.py --display-csv software --name [SWNAME] --version [VERSION]", context="")
        pt10 = schemas.PentoolCreate(name="jexboss", category="exploit", service="http", details="Exploit Apache Struts2 Jakarta Multipart parser RCE (CVE-2017-5638)", command="python3 root/jexboss/jexboss.py --auto-exploit --struts2 -u [URL] --cmd whoami --disable-check-updates", context="{ 'web-language': 'Java' }")
        pt11 = schemas.PentoolCreate(name="web-brutator", category="bruteforce", service="http", details="Bruteforce HTTP authentication (htaccess) if 401 Unauthorized returned", command="python3 web-brutator.py --url [URL] --target axis2 --userlist '[USERLIST default='usernames/usernames-short.txt']' --passlist '[PASSLIST default='passwords/pass-medium.txt']' --threads 40 --stoponsuccess", context="{ 'htaccess': True, 'auth_type': 'htaccess', 'auth_status': NO_AUTH }")
        pt12 = schemas.PentoolCreate(name="nikto", category="vulnscan", service="http", details="Check for multiple web vulnerabilities/misconfigurations", command="nikto -host [IP] -port [PORT]", context="")
        pt13 = schemas.PentoolCreate(name="ssh-audit", category="vulnscan", service="ssh", details="Scan supported algorithms and security info on SSH server", command="ssh-audit -v -p [PORT] [IP]", context="")
        pt14 = schemas.PentoolCreate(name="vulners-lookup", category="vulnlookup", service="any", details="Vulnerabilities lookup on Vulners.com (requires product name+version)", command="python3 root/vulners-lookup/vulners-lookup.py --display-csv all --apikey 2SYKEDGQRTNRZD72YK69GJ35YTVVWRWLO9PQLQ8H8QUOZJXWNZAXEWC2R8WIEP5P '[SWNAME] [VERSION]'", context="{ 'ssh-server': 'any|version_known' }")
        pt15 = schemas.PentoolCreate(name="hydra", category="bruteforce", service="ssh", details="Bruteforce SSH accounts Using hydra", command="hydra -L [USERLIST] -P [PASSLIST] -s [PORT] -e nsr -F -v -V [IP] ssh", context="")
        pt16 = schemas.PentoolCreate(name="ssh-user-enum", category="exploit", service="ssh", details="Enumerate valid SSH users", command="python3 root/cve-2018-15473/ssh-username-enum.py -p [PORT] -t 8 -v -w [WORDLIST] [IP]", context="")
        print('3')
        pt0_1 = crud.create_pentool(db, pt0_1)
        pt0 = crud.create_pentool(db, pt0)
        # pt1 = crud.create_pentool(db, pt1)
        pt2 = crud.create_pentool(db, pt2)
        # pt3 = crud.create_pentool(db, pt3)
        # pt5 = crud.create_pentool(db, pt5)
        # pt6 = crud.create_pentool(db, pt6)
        pt8 = crud.create_pentool(db, pt8)
        # pt9 = crud.create_pentool(db, pt9)
        pt10 = crud.create_pentool(db, pt10)
        pt11 = crud.create_pentool(db, pt11)
        # pt12 = crud.create_pentool(db, pt12)
        pt13 = crud.create_pentool(db, pt13)
        pt14 = crud.create_pentool(db, pt14)
        pt15 = crud.create_pentool(db, pt15)
        pt16 = crud.create_pentool(db, pt16)


        return {"result": "Pentest tools created"}
    except Exception as e:
        return {"error": str(e)}