from typing import Annotated, List

from fastapi import APIRouter, Depends, HTTPException, Request

from sqlalchemy.orm import Session

import re
import subprocess

from fastapi_jwt_auth import AuthJWT

from model.database import get_db

from model.kali_result import crud as kali_result_crud
from model.kali_result import schemas as kali_result_schemas

from model.pentest_tool import crud as pentest_tool_crud
from model.pentest_tool import schemas as pentest_tool_schemas

from result_parse.recon.halberd import parse_halberd_result
from result_parse.vulnlookup.vulners_lookup import parse_vulners_result, parse_exploits_result
from result_parse.bruteforce.hydra_ssh import parse_hydra_ssh
from result_parse.recon.nmap_basic import parse_nmap_basic
from result_parse.vulnscan.ssh_audit import write_sshaudit_result 
from result_parse.nmap_service_scan import parse_nmap_scan_report
from result_parse.ssh_basic_parsing import extract_software_and_version

router = APIRouter(
    prefix="/kali",
    tags=['Kali'],
    responses={404: {"description": "Not found"}},
)

def parse_and_save_halberd_result(db, output, service_id):
    tmp = parse_halberd_result(output)
    if tmp:
        for server in tmp:
            product = kali_result_schemas.KaliProductCreate(
                type='web-server',
                name=server.get('server_name'),
                version=server.get('server_version'),
                vendor='',
                kali_host_service_id=service_id
            )
            kali_result_crud.create_kali_product(db, product, service_id)

def parse_and_save_ssh_audit_result(db, output, service_id):
    tmp = write_sshaudit_result(output)
    if tmp:
        product = tmp.get('product')
        kali_product = kali_result_schemas.KaliProductCreate(
            type='ssh-server',
            name=product.get('name'),
            version=product.get('version'),
            vendor=product.get('vendor'),
            kali_host_service_id=service_id
        )
        kali_result_crud.create_kali_product(db, kali_product, service_id)
    else:
        # 대체로 banner에서 소프트웨어 및 버전 추출
        tmp = extract_software_and_version(output)
        if tmp:
            kali_product = kali_result_schemas.KaliProductCreate(
                type='ssh-server',
                name=tmp.get('name'),
                version=tmp.get('version'),
                vendor='',
                kali_host_service_id=service_id
            )
            kali_result_crud.create_kali_product(db, kali_product, service_id)

def parse_and_save_vulnlookup_result(db, output, service_id):
    vulns = parse_vulners_result(output)
    print(vulns)
    if vulns:
        for vuln in vulns:
            vulnerability = kali_result_schemas.VulnerabilityCreate(
                name=vuln.get('ID'),
                cvss=vuln.get('CVSS'),
                title=vuln.get('Title'),
                description=vuln.get('Description'),
                url=vuln.get('URL'),
                type=vuln.get('Type'),
                kali_host_service_id=service_id
            )
            kali_result_crud.create_vulnerability(db, vulnerability, service_id)
    exploits = parse_exploits_result(output)
    if exploits:
        for vuln in exploits:
            vulnerability = kali_result_schemas.VulnerabilityCreate(
                name=vuln.get('ID'),
                cvss=vuln.get('CVSS'),
                title=vuln.get('Title'),
                description=vuln.get('Description'),
                url=vuln.get('URL'),
                type=vuln.get('Type'),
                kali_host_service_id=service_id
            )
            kali_result_crud.create_vulnerability(db, vulnerability, service_id)

def extract_and_replace_https(command, tmp):
    # HTTPS 값을 추출
    match = re.search(r'\[HTTPS\s+true=\\?"([^"]*)"\\?\]', command)
    if match:
        https_value = match.group(1)
        if tmp:  # tmp 변수가 true인 경우
            # HTTPS 값을 기반으로 명령어 내의 HTTPS 부분을 대체
            modified_command = re.sub(r'\[HTTPS\s+true=\\?"([^"]*)"\\?\]', https_value, command)
        else:  # tmp 변수가 false인 경우
            # HTTPS 부분을 제거하여 명령어를 생성
            modified_command = re.sub(r'\[HTTPS\s+true=\\?"([^"]*)"\\?\]', '', command)
        return modified_command
    else:
        return command

@router.post("/test")
def test_kali(request: Request):
    return {"message": "test"}

@router.post("/category/{category}")
def get_pentools_by_category(category: str, Authorize: Annotated[AuthJWT, Depends()], db: Annotated[Session, Depends(get_db)]):
    Authorize.jwt_required()

    pentools = pentest_tool_crud.get_pentools_by_category(db, category)
    if not pentools:
        raise HTTPException(status_code=404, detail="Pentest tools not found")
    
    return pentools

@router.post("/attack/{ip}/{tool_id}")
def attack(ip:str, tool_id: int, Authorize: Annotated[AuthJWT, Depends()], db: Annotated[Session, Depends(get_db)]):
    Authorize.jwt_required()

    current_user = Authorize.get_jwt_subject()
    checkhttps = False

    base_command= f"docker exec kali"
    result = f""
    
    kali_host = kali_result_crud.get_kali_host_by_ip_and_uid(db, ip, current_user)
    if not kali_host:
        raise HTTPException(status_code=404, detail="Kali host not found")
    
    kali_host_services = kali_result_crud.get_kali_host_services_by_kali_host_id(db, kali_host.id)
    if not kali_host_services:
        raise HTTPException(status_code=404, detail="Kali host services not found")
    
    try:    
        for service in kali_host_services:
            # 서비스에 따른 취약점 검사 도구 가져오기
            tool = pentest_tool_crud.get_pentool_by_service_and_id(db, service.service, tool_id) or \
                pentest_tool_crud.get_pentool_by_service_and_id(db, "any", tool_id)
            
            if not tool:
                continue  # 도구가 없는 경우 다음 서비스로 이동

            # Command 설정 및 실행
            replaced_command = re.sub(r'\[IP\]', ip, tool.command)
            replaced_command = re.sub(r'\[PORT\]', str(service.port), replaced_command)
            replaced_command = re.sub(r'\[WORDLIST\]', "/usr/share/wordlists/metasploit/unix_users.txt", replaced_command)
            replaced_command = re.sub(r'\[USERLIST\]', "'/root/userlist.txt'", replaced_command)
            replaced_command = re.sub(r'\[PASSLIST\]', "'/root/pwlist.txt'", replaced_command)
            replaced_command = re.sub(r'\[URL\]', f"http://{ip}", replaced_command)
            
            if tool.category == "vulnlookup":
                product_list = kali_result_crud.get_kali_products_by_kali_host_service_id(db, service.id)
                if not product_list:
                    replaced_command = re.sub(r'\[SWNAME\]', service.banner, replaced_command)
                    replaced_command = re.sub(r'\[VERSION\]', "", replaced_command)
                for product in product_list:
                    replaced_command = re.sub(r'\[SWNAME\]', product.name.lower(), replaced_command)
                    replaced_command = re.sub(r'\[VERSION\]', product.version, replaced_command)

            # 명령어 실행 및 결과 저장
            command = f"{base_command} {replaced_command}"
            print(command)
            result = subprocess.run(command, shell=True, capture_output=True, text=True)

            # 서비스별 결과 처리
            if tool.name == "halberd":
                parse_and_save_halberd_result(db, result.stdout, service.id)
            elif tool.name == "ssh-audit":
                parse_and_save_ssh_audit_result(db, result.stdout, service.id)
            elif tool.category == "vulnlookup":
                parse_and_save_vulnlookup_result(db, result.stdout, service.id)
    
        return {"result" : result.stdout}

    except Exception as e:
        print(e)
        raise HTTPException(status_code=400, detail="Error")
            
    

@router.post("/basic_scan/{ip}")
def basic_scan(ip: str, Authorize: Annotated[AuthJWT, Depends()], db: Annotated[Session, Depends(get_db)]):
    Authorize.jwt_required()

    current_user = Authorize.get_jwt_subject()

    base_command= f"docker exec kali"

    try:
        nmap_service_scan = pentest_tool_crud.get_nmap_service_scan(db)

        if not nmap_service_scan:
            raise HTTPException(status_code=404, detail="Nmap service scan tool not found")
        
        host_result = kali_result_crud.get_kali_host_by_ip_and_uid(db, ip, current_user)

        if not host_result:
            host_result = kali_result_schemas.KaliHostCreate(os="", ip=ip, uid=current_user)
            host_result = kali_result_crud.create_kali_host(db, host_result)

        tmp_db = kali_result_crud.get_kali_host_services_by_kali_host_id(db, host_result.id)
        if tmp_db:
            tmp_vulns_db = kali_result_crud.get_vulnerabilities_by_kali_host_service_id(db, tmp_db[0].id)
            for vuln in tmp_vulns_db:
                kali_result_crud.delete_vulnerability(db, vuln.id)
                
            for service in tmp_db:
                kali_result_crud.delete_kali_host_service(db, service.id)
                
        replaced_command = re.sub(r'\[IP\]', ip, nmap_service_scan.command)
        command = f"{base_command} {replaced_command}"
        print(command)
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        print(result.stdout)

        parse_result = parse_nmap_scan_report(result.stdout)
        print(parse_result)


        for service in parse_result:
            create_kali_host_service = kali_result_schemas.KaliHostServiceCreate(service=service['service'], port=service['port'], kali_host_id=host_result.id, banner="")
            kali_result_crud.create_kali_host_service(db, create_kali_host_service, host_result.id)

        return {"result" : result.stdout}
    
    except Exception as e:
        print(e)
        raise HTTPException(status_code=400, detail="Error")

@router.post("/service_scan/{ip}")
def service_scan(ip: str, Authorize: Annotated[AuthJWT, Depends()], db: Annotated[Session, Depends(get_db)]):
    Authorize.jwt_required()

    current_user = Authorize.get_jwt_subject()

    base_command= f"docker exec kali"

    try:
        nmap_basic = pentest_tool_crud.get_nmap_basic(db)

        if not nmap_basic:
            raise HTTPException(status_code=404, detail="Nmap basic scan tool not found")
        
        kali_host = kali_result_crud.get_kali_host_by_ip_and_uid(db, ip, current_user)

        if not kali_host:
            raise HTTPException(status_code=404, detail="Kali host not found")
        
        kali_host_services = kali_result_crud.get_kali_host_services_by_kali_host_id(db, kali_host.id)

        if not kali_host_services:
            raise HTTPException(status_code=404, detail="Kali host services not found")
        
        for service in kali_host_services:
            replaced_command = re.sub(r'\[IP\]', ip, nmap_basic.command)
            replaced_command = re.sub(r'\[PORT\]', str(service.port), replaced_command)
            command = f"{base_command} {replaced_command}"
            print(command)

            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            print(result.stdout)
            parse_result = parse_nmap_basic(result.stdout)

            if parse_result.get('banner') == "Unrecognized service":
                if parse_result.get('service') == "http":
                    kali_result_crud.delete_kali_host_service_by_service_and_kali_host_id(db, "http", kali_host.id)
                    kali_result_crud.delete_kali_host_service_by_service_and_kali_host_id(db, "https", kali_host.id)
                continue
            elif parse_result.get('service') != "unknown":
                service.banner = parse_result.get('banner')
                service.service = parse_result.get('service')
                kali_result_crud.update_kali_host_service(db, service.id, service)
                if(kali_host.os == "" or not kali_host.os):
                    kali_host.os = parse_result.get('os')
                kali_result_crud.update_kali_host(db, kali_host.id, kali_host)

        return {"result" : result.stdout}
    
    except Exception as e:
        print(f"Error: {str(e)}")
        raise HTTPException(status_code=400, detail=f"Error: {str(e)}")

@router.post("/get_services/{ip}")
def get_services(ip: str, Authorize: Annotated[AuthJWT, Depends()], db: Annotated[Session, Depends(get_db)]):
    Authorize.jwt_required()

    current_user = Authorize.get_jwt_subject()

    kali_host = kali_result_crud.get_kali_host_by_ip_and_uid(db, ip, current_user)

    if not kali_host:
        raise HTTPException(status_code=404, detail="Kali host not found")
    
    kali_host_services = kali_result_crud.get_kali_host_services_by_kali_host_id(db, kali_host.id)

    if not kali_host_services:
        raise HTTPException(status_code=404, detail="Kali host services not found")
    
    return kali_host_services

